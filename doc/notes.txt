[tag>text<tag]
[tag> text <tag]

expect:
step 1:
- token: [tag>
- expect: anyOpenTag
- match: yes
- derived expectation: group(choice(anyOpenTag, text),closeTag(tag)) // moet de expectation al meteen de hele token sequence vangen?

step 2:
- token: text
- expect: group(choice(anyOpenTag, text),closeTag(tag))
- match: yes, matches with text
- derived expectation: group(choice(anyOpenTag,empty),closeTag(tag))

step 3
- token: <tag]
- expect: group(choice(anyOpenTag,empty),closeTag(tag))
- match: yes, matches with closeTag(tag)
- derived expectation: empty

step 3
- eof (matches empty)




[tag>[color>Green<color] [food>Eggs<food] and [food>Ham<food]<tag]

step 1:
- token: [tag>
- expect: anyOpenTag
- match: yes
- derived expectation: group(choice(anyOpenTag, text),closeTag(tag))

step 2:
- token: [color>
- expect: group(choice(anyOpenTag, text),closeTag(tag))
- match: yes, matches anyOpenTag
- derived expectation: group(choice(anyOpenTag, text,empty),closeTag(color),choice(anyOpenTag, text,empty),closeTag(tag))

step 3:
- token: Green
- expect: group(choice(anyOpenTag, text),closeTag(color),choice(anyOpenTag, text),closeTag(tag))


-----
patterncombinators met 2 patterns: kunnen ze uitgebreid worden tot n patterns?
choice(p1,p2) -> choice(p1..pn)
dit zou de nesting van patterns minder maken: choice(p1,p2,p3) wordt nu choice(choice(p1,p2),p3) of choice(p1,choice(p2,p3))
in haskell is dit niet te doen, omdat je voor elk aantal parameters een regel moet schrijven
in Jing-Trang zijn After, Choice, Group en Interleave BinaryPatterns -> dus geen aggregatie?


-----
texttokens met alleen whitespace apart behandelen?

http://conferences.idealliance.org/extreme/html/2006/SperbergMcQueen01/EML2006SperbergMcQueen01.html
https://www.princexml.com/howcome/2007/xtech/papers/output/0077-30.pdf


# LSP
- completion:
  - on '<' : list open tags at this point that can be closed: 1 per layer, add layerid when required (because tag 'x' is open in multiple layers; start typing -> limit list of close tags, or '<|_|_|>'
  - on '[' : when at start: [!ns _], [!schema _], [! _ !] (schema only once, others can be repeated)
                  otherwise: [! _ !]
                  when schema defined: for every open layer, show the next children as open tags
  - on '|': when inside open/close tag: show available layer_ids  + '+'; when schema is defined: show '+'"+ layername for layers that haven't been opened yet, layername for others
  - on ' ' after tagname, when schema defined: show annotation names as defined in schema


# on the growth of the derived patterns (and how to limit that):
https://maniagnosis.crsr.net/2012/05/parsing-with-derivatives-compaction.html

https://crypto.stanford.edu/~blynn/haskell/pwd.html
https://arxiv.org/abs/1604.04695
